  1: # rsyslog configuration file
  2: 
  3: ## Global Directives and defaults
  4: 
  5: # Where to place auxiliary files
  6: $WorkDirectory /var/lib/rsyslog
  7: 
  8: # Use default timestamp format (can be overidden per rule set)
  9: $ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat
 10: 
 11: # Include config files in /etc/rsyslog.d/
 12: $IncludeConfig /etc/rsyslog.d/*.conf
##< start of include directive: $IncludeConfig /etc/rsyslog.d/*.conf
##^ expanding file: /etc/rsyslog.d/30-globals.conf
  1: # Collect stats - rsyslog docs warn to load this module first before others (but might only be applicable to legacy config)
  2: module(
  3:   load="impstats"
  4:   interval="60"
  5:   resetCounters="on"
  6:   Format="cee"
  7:   ruleset="syslog_stats"
  8: )
  9: 
 10: # Load extra parser modules which the peoples might want to use in the parser chain - will waste a bit of memory, but keeps logic simpler
 11: module(load="pmlastmsg")
 12: module(load="pmaixforwardedfrom")
 13: module(load="pmciscoios")
 14: module(load="pmnull")
 15: 
 16: module(load="mmjsonparse")
 17: # Parse RFCR424 structured data
 18: module(load="mmpstrucdata")
 19: 
 20: # Globals
 21: global(
 22:   parser.permitSlashInProgramName="on"
 23:   parser.escapeControlCharacterTab="off"
 24:   preserveFQDN="on"
 25:   maxMessageSize="65536"
 26:   action.reportSuspension="on"
 27:   senders.keepTrack="on"
 28:   senders.timeoutAfter="86400"
 29:   senders.reportGoneAway="on"
 30:   shutdown.enable.ctlc="on"
 31:   processInternalMessages="on"
 32: )
##^ expanding file: /etc/rsyslog.d/50-output_format.conf
  1: # Output templates
  2: # Built-in templates at https://www.rsyslog.com/doc/v8-stable/configuration/templates.html#reserved-template-names
  3: # E.g.
  4: # - RSYSLOG_TraditionalFileFormat
  5: # - RSYSLOG_FileFormat
  6: # - RSYSLOG_TraditionalForwardFormat
  7: # - RSYSLOG_SyslogProtocol23Format
  8: 
  9: # Simple raw message template (might be useful for passing on messages unprocessed)
 10: template(name="RawMsg" type="string" string="%rawmsg%\n")
 11: 
 12: # Misc templates (e.g. for calling via exec_template)
 13: # TODO: If need be
 14: 
 15: # Standard example of RFC5424
 16: # Note, RSYSLOG_SyslogProtocol23Format is the built-in reserved template name for a draft of RFC5424, so the above is more or less identical to that
 17: template(name="TmplRFC5424" type="string" string="<%pri%>1 %timestamp:::date-rfc3339% %hostname% %app-name% %procid% %msgid% %structured-data% %msg%\n")
 18: 
 19: # RFC5424 with syslog relay and own custom meta-data pre-pended to the structured data element
 20: # Like RSYSLOG_SyslogProtocol23Format, but with a special extra structured data field to append structured data.
 21: # Use of variable property types as per https://www.rsyslog.com/doc/master/rainerscript/variable_property_types.html
 22: # Regex needed to deal with structured data being null '-' and needing to append/replace null.
 23: # `%structured-data:R,ERE,0,BLANK:[[].*--end%` avoids appending a null charceter '-' if there wasn't any pre-existing structured data.
 24: # See http://www.rsyslog.com/doc/v8-stable/configuration/nomatch.html
 25: template(name="TmplRFC5424Meta" type="string" string="<%pri%>1 %timestamp:::date-rfc3339% %$.hostname% %app-name% %procid% %msgid% [syslog-relay@16543 timegenerated=\"%timegenerated:::date-rfc3339%\" fromhost=\"%fromhost%\" fromhost-ip=\"%fromhost-ip%\" myhostname=\"%$myhostname%\" inputname=\"%inputname%\" format=\"%$.syslog-relay!format%\" pri-valid=\"%$.syslog-relay!pri-valid%\" header-valid=\"%$.syslog-relay!header-valid%\" json-msg-parsed=\"%$.syslog-relay!json-msg-parsed%\" tls=\"%$.syslog-relay!tls%\" authenticated-client=\"%$.syslog-relay!authenticated-client%\"]%structured-data:R,ERE,0,BLANK:[[].*--end% %msg%\n")
 26: 
 27: # JSON templates
 28: 
 29: # Make sure the message content is escaped to be safely interpreted as JSON
 30: # NB! Rainerscript only supports setting quoted variables and jsonf outputs a quoted value forcing a string JSON type. To get integer or boolean JSON types requires manually building a JSON field, i.e. otherwise { "boolean": true } gets quoted as { "boolean": "true" }
 31: # While bool and int JSON types are used, for RFC5424, `-` represents null and is left as when the field is flat (not a nested object). However, if the structured data element is `-` or can't be parsed into json, then it is set as null because some products like elasticsearch will have data mapping conflicts if it expects a json object (e.g. nested field) but instead gets a plain string (e.g. `-`).
 32: 
 33: # Output the full native rsyslog JSON message object
 34: template(name="TmplRSyslogJSON" type="string" string="%jsonmesg%\n")
 35: 
 36: # Output a subset of the native rsyslog JSON message fields
 37: # Note:
 38: # - JSON $! tree output will output empty enclosing brakets { } if $! doesn't have any JSON values set which will cause invalid JSON, so strip these by removing first 2 charceters '{ ' and allowing the end closing braket to occur in case this is indeed empty.
 39: # - Handle cases where metadata or structured data is to be added
 40: # - if metadata is enabled, RFC3164 assumed hostname parsing that might be incorrect are replaced with local var $.hostname = $fromhost instead of standard $hostname property when headers are detected as non-conformant
 41: template(name="TmplJSON" type="list") {
 42:   constant(value="{ ")
 43:   property(name="syslogfacility" format="jsonf")
 44:   constant(value=", ")
 45:   property(name="syslogfacility-text" format="jsonf")
 46:   constant(value=", ")
 47:   property(name="syslogseverity" format="jsonf")
 48:   constant(value=", ")
 49:   property(name="syslogseverity-text" format="jsonf")
 50:   constant(value=", ")
 51:   property(name="timestamp" dateFormat="rfc3339" format="jsonf")
 52:   constant(value=", ")
 53:   property(name="$.hostname" outname="hostname" format="jsonf")
 54:   constant(value=", ")
 55:   property(name="app-name" format="jsonf")
 56:   constant(value=", ")
 57:   property(name="procid" format="jsonf")
 58:   constant(value=", ")
 59:   property(name="msgid" format="jsonf")
 60:   constant(value=", ")
 61:   constant(value="\"syslog-relay\": { ")
 62:   property(name="timegenerated" dateFormat="rfc3339" format="jsonf")
 63:   constant(value=", ")
 64:   property(name="fromhost" format="jsonf")
 65:   constant(value=", ")
 66:   property(name="fromhost-ip" format="jsonf")
 67:   constant(value=", \"myhostname\":\"")
 68:   property(name="$myhostname" format="jsonr")
 69:   constant(value="\", ")
 70:   property(name="inputname" format="jsonf")
 71:   constant(value=", \"format\":\"")
 72:   property(name="$.syslog-relay!format" format="jsonr")
 73:   constant(value="\", \"pri-valid\":")
 74:   property(name="$.syslog-relay!pri-valid")
 75:   constant(value=", \"header-valid\":")
 76:   property(name="$.syslog-relay!header-valid")
 77:   constant(value=", \"json-msg-parsed\":")
 78:   property(name="$.syslog-relay!json-msg-parsed")
 79:   constant(value=", \"tls\":")
 80:   property(name="$.syslog-relay!tls")
 81:   constant(value=", \"authenticated-client\":")
 82:   property(name="$.syslog-relay!authenticated-client")
 83:   constant(value=" }, ")
 84:   
 85:   property(name="msg" format="jsonf")
 86:   constant(value=", ")
 87:   property(name="$!" position.from="2")
 88:   constant(value="\n")
 89: }
 90: 
 91: template(name="TmplJSONRawMsg" type="list") {
 92:   constant(value="{ ")
 93:   property(name="syslogfacility" format="jsonf")
 94:   constant(value=", ")
 95:   property(name="syslogfacility-text" format="jsonf")
 96:   constant(value=", ")
 97:   property(name="syslogseverity" format="jsonf")
 98:   constant(value=", ")
 99:   property(name="syslogseverity-text" format="jsonf")
100:   constant(value=", ")
101:   property(name="timestamp" dateFormat="rfc3339" format="jsonf")
102:   constant(value=", ")
103:   property(name="$.hostname" outname="hostname" format="jsonf")
104:   constant(value=", ")
105:   property(name="app-name" format="jsonf")
106:   constant(value=", ")
107:   property(name="procid" format="jsonf")
108:   constant(value=", ")
109:   property(name="msgid" format="jsonf")
110:   constant(value=", ")
111:   constant(value="\"syslog-relay\": { ")
112:   property(name="timegenerated" dateFormat="rfc3339" format="jsonf")
113:   constant(value=", ")
114:   property(name="fromhost" format="jsonf")
115:   constant(value=", ")
116:   property(name="fromhost-ip" format="jsonf")
117:   constant(value=", \"myhostname\":\"")
118:   property(name="$myhostname" format="jsonr")
119:   constant(value="\", ")
120:   property(name="inputname" format="jsonf")
121:   constant(value=", \"format\":\"")
122:   property(name="$.syslog-relay!format" format="jsonr")
123:   constant(value="\", \"pri-valid\":")
124:   property(name="$.syslog-relay!pri-valid")
125:   constant(value=", \"header-valid\":")
126:   property(name="$.syslog-relay!header-valid")
127:   constant(value=", \"json-msg-parsed\":")
128:   property(name="$.syslog-relay!json-msg-parsed")
129:   constant(value=", \"tls\":")
130:   property(name="$.syslog-relay!tls")
131:   constant(value=", \"authenticated-client\":")
132:   property(name="$.syslog-relay!authenticated-client")
133:   constant(value=" }, ")
134:   
135:   property(name="rawmsg" format="jsonf")
136:   constant(value=", ")
137:   property(name="$!" position.from="2")
138:   constant(value="\n")
139: }
140: 
141: template(name="TmplJSONMsgAndRawMsg" type="list") {
142:   constant(value="{ ")
143:   property(name="syslogfacility" format="jsonf")
144:   constant(value=", ")
145:   property(name="syslogfacility-text" format="jsonf")
146:   constant(value=", ")
147:   property(name="syslogseverity" format="jsonf")
148:   constant(value=", ")
149:   property(name="syslogseverity-text" format="jsonf")
150:   constant(value=", ")
151:   property(name="timestamp" dateFormat="rfc3339" format="jsonf")
152:   constant(value=", ")
153:   property(name="$.hostname" outname="hostname" format="jsonf")
154:   constant(value=", ")
155:   property(name="app-name" format="jsonf")
156:   constant(value=", ")
157:   property(name="procid" format="jsonf")
158:   constant(value=", ")
159:   property(name="msgid" format="jsonf")
160:   constant(value=", ")
161:   constant(value="\"syslog-relay\": { ")
162:   property(name="timegenerated" dateFormat="rfc3339" format="jsonf")
163:   constant(value=", ")
164:   property(name="fromhost" format="jsonf")
165:   constant(value=", ")
166:   property(name="fromhost-ip" format="jsonf")
167:   constant(value=", \"myhostname\":\"")
168:   property(name="$myhostname" format="jsonr")
169:   constant(value="\", ")
170:   property(name="inputname" format="jsonf")
171:   constant(value=", \"format\":\"")
172:   property(name="$.syslog-relay!format" format="jsonr")
173:   constant(value="\", \"pri-valid\":")
174:   property(name="$.syslog-relay!pri-valid")
175:   constant(value=", \"header-valid\":")
176:   property(name="$.syslog-relay!header-valid")
177:   constant(value=", \"json-msg-parsed\":")
178:   property(name="$.syslog-relay!json-msg-parsed")
179:   constant(value=", \"tls\":")
180:   property(name="$.syslog-relay!tls")
181:   constant(value=", \"authenticated-client\":")
182:   property(name="$.syslog-relay!authenticated-client")
183:   constant(value=" }, ")
184:   
185:   property(name="msg" format="jsonf")
186:   constant(value=", ")
187:   property(name="rawmsg" format="jsonf")
188:   constant(value=", ")
189:   property(name="$!" position.from="2")
190:   constant(value="\n")
191: }
192: 
193: # Special templates for handling rsyslog errors
194: template(name="DynStatsError" type="string" string="fromhost=%fromhost% error=%$.inc_status%\n")
195: template(name="Empty" type="string" string="")
##^ expanding file: /etc/rsyslog.d/60-ruleset.conf
  1: # Rules and actions to apply when a specific kind of input is received
  2: # Note extensive use of variable property types as per https://www.rsyslog.com/doc/master/rainerscript/variable_property_types.html
  3: 
  4: # Customise the settings of the built-in RFC3164 to use extra options to better handle malformed messages
  5: # - Avoid populating syslog tags incorrectly when bad clients don't follow tagging conventions
  6: # - Avoid adding in a pre-pending space in the message field
  7: parser(
  8:   name="custom.rfc3164" type="pmrfc3164"
  9:   force.tagEndingByColon="on"
 10:   remove.msgFirstSpace="on"
 11:   permit.squareBracketsInHostname="off"
 12:   permit.slashesInHostname="on"
 13:   permit.atSignsInHostname="off"
 14: )
 15: 
 16: # Stats
 17: ruleset(name="syslog_stats") {
 18:   # TODO
 19:   # - In future ommit setting these values and simply ommit from message when not relevant
 20:   # - Needed for now due to explicit templating because of issues like https://github.com/rsyslog/rsyslog/issues/2873
 21:   set $.syslog-relay!tls = "false";
 22:   set $.syslog-relay!authenticated-client = "false";
 23:   call output
 24: }
 25: 
 26: # To count message input per source
 27: # Note about reliablity of hostname and fromhost rsyslog properties
 28: # - Can't always trust hostname 
 29: #   - source can send malformed syslog headers
 30: #   - $.hostname is sometimes used to correct for cases where something seems incorrect about the source hostname
 31: #   - $fromhost might be a more reliable metric than $hostname for the above situation
 32: # - Can't always trust fromhost
 33: #   - SNAT might cause fromhost to have the IP of a network device and not the actual host sending the message
 34: # So both hostname nor fromhost can have corner cases that make accounting for the true source inaccurate
 35: # Filtering can affect the per message host count, e.g. more inputs than outputs
 36: dyn_stats(name="msg_per_fromhost_remote_in_udp_pre_filter" resettable="on" maxCardinality="10000" unusedMetricLife="86400" )
 37: dyn_stats(name="msg_per_fromhost_remote_in_tcp_pre_filter" resettable="on" maxCardinality="10000" unusedMetricLife="86400" )
 38: dyn_stats(name="msg_per_fromhost_remote_in_tcp_secure_pre_filter" resettable="on" maxCardinality="10000" unusedMetricLife="86400" )
 39: dyn_stats(name="msg_per_fromhost_remote_in_relp_pre_filter" resettable="on" maxCardinality="10000" unusedMetricLife="86400" )
 40: dyn_stats(name="msg_per_fromhost_remote_in_relp_secure_pre_filter" resettable="on" maxCardinality="10000" unusedMetricLife="86400" )
 41: dyn_stats(name="msg_per_fromhost_remote_in_relp_secure_client_auth_pre_filter" resettable="on" maxCardinality="10000" unusedMetricLife="86400" )
 42: # To count messages processed at the start of the output ruleset (before output filtering)
 43: dyn_stats(name="msg_per_fromhost" resettable="on" maxCardinality="10000" unusedMetricLife="86400" )
 44: 
 45: # Input related rulesets
 46: # Input filter rules are placed in filter/*.conf and should be conditions that drop (stop) messages from being processed futher
 47: 
 48: ruleset(name="remote_in_udp" parser=["rsyslog.rfc5424", "rsyslog.aixforwardedfrom", "custom.rfc3164"]) {
 49:   set $.inc_status = dyn_inc("msg_per_fromhost_remote_in_udp_pre_filter", $fromhost);
 50:   # TODO - improve action when incriment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
 51:   if ($.inc_status != 0) then { 
 52:     action(name="dyn_stat_inc_error" type="omfile" file="/dev/null" template="DynStatsError")
 53:   }
 54:   set $.syslog-relay!tls = "false";
 55:   set $.syslog-relay!authenticated-client = "false";
 56:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
 57:   $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_udp/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_udp/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_udp/*.conf
 58:   call output
 59: }
 60: 
 61: ruleset(name="remote_in_tcp" parser=["rsyslog.rfc5424", "rsyslog.aixforwardedfrom", "custom.rfc3164"]) {
 62:   set $.inc_status = dyn_inc("msg_per_fromhost_remote_in_tcp_pre_filter", $fromhost);
 63:   # TODO - improve action when incriment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
 64:   if ($.inc_status != 0) then { 
 65:     action(name="dyn_stat_inc_error" type="omfile" file="/dev/null" template="Empty")
 66:   }
 67:   set $.syslog-relay!tls = "false";
 68:   set $.syslog-relay!authenticated-client = "false";
 69:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
 70:   $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_tcp/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_tcp/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_tcp/*.conf
 71:   call output
 72: }
 73: 
 74: ruleset(name="remote_in_tcp_secure" parser=["rsyslog.rfc5424", "rsyslog.aixforwardedfrom", "custom.rfc3164"]) {
 75:   set $.inc_status = dyn_inc("msg_per_fromhost_remote_in_tcp_secure_pre_filter", $fromhost);
 76:   # TODO - improve action when incriment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
 77:   if ($.inc_status != 0) then { 
 78:     action(name="dyn_stat_inc_error" type="omfile" file="/dev/null" template="Empty")
 79:   }
 80:   set $.syslog-relay!tls = "true";
 81:   set $.syslog-relay!authenticated-client = "false";
 82:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
 83:   $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_tcp_secure/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_tcp_secure/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_tcp_secure/*.conf
 84:   call output
 85: }
 86: 
 87: ruleset(name="remote_in_relp" parser=["rsyslog.rfc5424", "rsyslog.aixforwardedfrom", "custom.rfc3164"]) {
 88:   set $.inc_status = dyn_inc("msg_per_fromhost_remote_in_relp_pre_filter", $fromhost);
 89:   # TODO - improve action when incriment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
 90:   if ($.inc_status != 0) then { 
 91:     action(name="dyn_stat_inc_error" type="omfile" file="/dev/null" template="Empty")
 92:   }
 93:   set $.syslog-relay!tls = "false";
 94:   set $.syslog-relay!authenticated-client = "false";
 95:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
 96:   $IncludeConfig /etc/rsyslog.d/input/remote_in_relp/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/remote_in_relp/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/remote_in_relp/*.conf
 97:   call output
 98: }
 99: 
100: # NB: rsyslog limitation seems to block RELP TLS without client authentication
101: ruleset(name="remote_in_relp_secure" parser=["rsyslog.rfc5424", "rsyslog.aixforwardedfrom", "custom.rfc3164"]) {
102:   set $.inc_status = dyn_inc("msg_per_fromhost_remote_in_relp_secure_pre_filter", $fromhost);
103:   # TODO - improve action when incriment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
104:   if ($.inc_status != 0) then { 
105:     action(name="dyn_stat_inc_error" type="omfile" file="/dev/null" template="Empty")
106:   }
107:   set $.syslog-relay!tls = "true";
108:   set $.syslog-relay!authenticated-client = "false";
109:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
110:   $IncludeConfig /etc/rsyslog.d/input/remote_in_relp_secure/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/remote_in_relp_secure/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/remote_in_relp_secure/*.conf
111:   call output
112: }
113: 
114: ruleset(name="remote_in_relp_secure_client_auth" parser=["rsyslog.rfc5424", "rsyslog.aixforwardedfrom", "custom.rfc3164"]) {
115:   set $.inc_status = dyn_inc("msg_per_fromhost_remote_in_relp_secure_client_auth_pre_filter", $fromhost);
116:   # TODO - improve action when incriment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
117:   if ($.inc_status != 0) then { 
118:     action(name="dyn_stat_inc_error" type="omfile" file="/dev/null" template="Empty")
119:   }
120:   set $.syslog-relay!tls = "true";
121:   set $.syslog-relay!authenticated-client = "true";
122:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
123:   $IncludeConfig /etc/rsyslog.d/input/remote_in_relp_secure_client_auth/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/input/remote_in_relp_secure_client_auth/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/input/remote_in_relp_secure_client_auth/*.conf
124:   call output
125: }
126: 
127: # Ouptut rulesets
128: # Rules to output and forward / relay messages placed in output/*.conf and called below
129: 
130: ruleset(name="output") {
131: 
132:   set $.inc_status = dyn_inc("msg_per_fromhost", $fromhost);
133:   # TODO - improve action when incriment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
134:   if ($.inc_status != 0) then { 
135:     action(name="dyn_stat_inc_error" type="omfile" file="/dev/null" template="Empty")
136:   }
137: 
138:   # Add metadata about how the message was received and compensate for malformed messages
139:   # TODO: Copy and create properties in a nested metadata json subelement called "syslog-relay"
140:   # Note:
141:   # - Copying properties is less efficient.
142:   # - But this could simplify manually constructing JSON output with complex templates...
143:   # - `$!` can be output without needing to know exectly which JSON fields are present or not allowinig more dynamic attributes for messages.
144:   # There are issues formatting nested JSON output and items commented out due to limitations
145:   # - Instead, explicit / manual templating for JSON is the current workarround
146:   # - See https://github.com/rsyslog/rsyslog/issues/2873
147:   # - See https://github.com/rsyslog/rsyslog/issues/2827
148:   # Commented out due to above limitations
149:   #set $.syslog-relay!timegenerated = format_time($timegenerated, "date-rfc3339");
150:   #set $.syslog-relay!fromhost = $fromhost;
151:   #set $.syslog-relay!fromhost-ip = $fromhost-ip;
152:   #set $.syslog-relay!myhostname = $$myhostname;
153:   #set $.syslog-relay!inputname = $inputname;
154:   if ($protocol-version == "1") then {
155:     set $.syslog-relay!format = "RFC5424";
156:     # when rsyslog parses a message as version 1 / RFC5424, it implies parsing worked
157:     set $.syslog-relay!pri-valid = "true";
158:     set $.syslog-relay!header-valid = "true";
159:     set $.hostname = $hostname;
160:   } else if ($app-name == "rsyslogd-pstats" and ($fromhost-ip == "127.0.0.1" or $fromhost-ip == "::1" )) then {
161:       # Catch corner case where rsyslog impstats produces valid header properties, but the rawmsg field doesn't include the standard syslog header because it's internal
162:       set $.syslog-relay!format = "NA_internal_rsyslogd-pstats";
163:       set $.syslog-relay!pri-valid = "false";
164:       set $.syslog-relay!header-valid = "false";
165:       set $.hostname = $hostname;
166:   } else {
167:     # assume protocol-version == 0
168:     # check priority
169:     # 0-191 are valid priority encodings, set to 192 > 191 to indicate invalid
170:     set $.pri-test = cnum(re_extract($rawmsg, "^<([0-9]{1,3})>", 0, 0, "192"));
171:     if ($.pri-test > 191) then {
172:       set $.syslog-relay!format = "RFC3164_malformed";
173:       set $.syslog-relay!pri-valid = "false";
174:       set $.hostname = $fromhost;
175:     } else {
176:       set $.syslog-relay!pri-valid = "true";
177:     }
178:     # Check syslog header (date and hostname)
179:     # - See https://github.com/rsyslog/rsyslog/issues/1789
180:     # - Regex is costly, so skim for 'Mmm' pattern of date (but dont match to actual months)
181:     # - Also use a trick to see if rsyslog assumed the first word was the hostname after failing to parse a syslog header date
182:     if (not re_match($rawmsg-after-pri, "^[A-Z][a-z]{2}") or $rawmsg-after-pri startswith $hostname) then {
183:       # rsyslog assumed first word of malformed message was the hostname, so RFC3164 conventions for timestamp and hostname not followed
184:       set $.syslog-relay!format = "RFC3164_malformed";
185:       set $.syslog-relay!header-valid = "false";
186:       set $.hostname = $fromhost;
187:       # If we wanted to correct a misaligned $msg due to a bad header...
188:       #set $.msg = $rawmsg-after-pri;
189:     } else {
190:       set $.syslog-relay!format = "RFC3164";
191:       # above checks not 100% precise to avoid perfomance cost, so only reasonably confident a good header was found
192:       set $.syslog-relay!header-valid = "true";
193:       set $.hostname = $hostname;
194:       #set $.msg = $msg;
195:     }
196:     # TODO check for valid app-name and processs ID values?
197:   }
198: 
199:   # Parse RFC5424 structured elements into JSON
200:   if ($structured-data == "-") then {
201:     # !rfc5424-sd won't be created if there's no structured data, but a template might expect it to exist. See https://github.com/rsyslog/rsyslog/issues/1891
202:     # Note rsyslog json properties don't yet support setting a proper JSON null value, so use a string
203:     set $!rfc5424-sd = "null";
204:   } else {
205:     # jsonRoot doesn't change the name of where fields are parsed to. It just moves where it is put. See https://github.com/rsyslog/rsyslog/issues/1262
206:     #action(type="mmpstrucdata" name="output_mmpstrucdata" jsonRoot="$!structured-data")
207:     action(type="mmpstrucdata" name="output_mmpstrucdata")
208:     # Guard against $!rfc5424-sd not existing if there was a parse failure
209:     # note, rsyslog has not yet got an exits() function, so workarround is to check for a blank string: https://github.com/rsyslog/rsyslog/issues/970
210:     if ($!rfc5424-sd == "") then {
211:       set $!rfc5424-sd = "null";
212:       set $.syslog-relay!format = "RFC5424_malformed";
213:     }
214:   }
215: 
216:   # Support trying to decode msg part as JSON (hopefully fails fast when not JSON)
217:   # - nullify $!msg-json if there is a failure
218:   # - null is represented as the literal string "null" and requires care with templates to output as a true JSON null datatype
219:   # By default, require the @cee cookie
220:   action(type="mmjsonparse" name="mmjsonparse_cee")
221:   if $parsesuccess == "OK" then {
222:     set $.syslog-relay!json-msg-parsed = "true";
223:     continue
224:   } else {
225:     # Also try parsing message as JSON without the @cee cookie
226:     # - mmjsonparse will fail to decode messages that have both structured data elements and JSON without a @cee cookie
227:     action(type="mmjsonparse" name="mmjsonparse_without_cee" cookie="")
228:     if $parsesuccess == "OK" then {
229:       set $.syslog-relay!json-msg-parsed = "true";
230:     } else {
231:       # remove duplicated $!msg field (will use $msg in templates instead)
232:       unset $!msg;
233:       set $.syslog-relay!json-msg-parsed = "false";
234:     }
235:   }
236: 
237:   # global output filter
238:   $IncludeConfig /etc/rsyslog.d/output/filters/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/output/filters/*.conf
##^ expanding file: /etc/rsyslog.d/output/filters/exclude_debug.conf
  1: # don't permit debug level logging
  2: if ( $syslogseverity == '7' ) then { stop }
##^ expanding file: /etc/rsyslog.d/output/filters/include_all.conf
  1: # tests white-list approach where this regex matches everything
  2: if (not re_match($msg, ".*")) then { stop }
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/output/filters/*.conf
239: 
240:   # Standard outputs "pre-bundled
241:   call out_file
242:   call fwd_kafka
243:   call fwd_syslog
244:   call fwd_json
245: 
246:   # Add extra output ruleset call for extra conf
247:   call fwd_extra
248: 
249: }
##> end of expand directive: $IncludeConfig /etc/rsyslog.d/*.conf
 13: $IncludeConfig /etc/rsyslog.d/input/*.conf
##< start of include directive: $IncludeConfig /etc/rsyslog.d/input/*.conf
##^ expanding file: /etc/rsyslog.d/input/41-udp_in.conf
  1: module(
  2:   load="imudp"
  3:   threads="1"
  4: )
  5: 
  6: # provides UDP syslog resception
  7: input(
  8:   type="imudp"
  9:   port="514"
 10:   ruleset="remote_in_udp"
 11: )
##^ expanding file: /etc/rsyslog.d/input/42-tcp_in.conf
  1: # Note:
  2: # - RSyslog TCP relies on a stream driver, and the stream driver settings are global because they are set when the module is imtcp module is loaded.
  3: # - Therefore, there cannot be varied TLS security requirements for multiple TCP TLS inputs.
  4: # - There don't seem to be any documented settings for TLS client auth as optional (it's either required or not).
  5: 
  6: # Global directives related to TCP
  7: global(
  8:   # TCP TLS (does not apply to RELP)
  9:   defaultNetstreamDriverCAFile="/usr/local/etc/pki/test/test_ca.cert.pem"
 10:   defaultNetstreamDriverCertFile="/usr/local/etc/pki/test/test_syslog_server.cert.pem"
 11:   defaultNetstreamDriverKeyFile="/usr/local/etc/pki/test/test_syslog_server.key.pem"
 12:   defaultNetstreamDriver="ptcp"
 13:   #defaultNetstreamDriver="gtls"
 14: )
 15: 
 16: # For plain TCP without TLS (tailored for high performance on Linux)
 17: module(
 18:   load="imptcp"
 19:   threads="1"
 20:   processOnPoller="off"
 21: )
 22: # For TCP with TLS (imptcp does not support TLS)
 23: module(
 24:   load="imtcp"
 25:   maxSessions="1000"
 26:   streamDriver.name="gtls"
 27:   streamDriver.mode="1"
 28:     #This indicates TLS is enabled. 0 indicated disabled.
 29:   streamDriver.authMode="anon"
 30:   
 31: )
 32: 
 33: # provides plain TCP syslog reception. Both port 514 and 601 (IANA offical registered number)
 34: input(type="imptcp" port="514" ruleset="remote_in_tcp")
 35: input(type="imptcp" port="601" ruleset="remote_in_tcp")
 36: 
 37: # provides secure TCP syslog reception
 38: input(
 39:   type="imtcp"
 40:   name="tcp_secure"
 41:   port="6514"
 42:   ruleset="remote_in_tcp_secure"
 43: )
##^ expanding file: /etc/rsyslog.d/input/43-relp_in.conf
  1: # RELP and librelp seems to support it's own TLS settings per input. Therefore, there can be varied TLS security requirements (e.g. needing client auth) per RELP input and port.
  2: 
  3: module(load="imrelp")
  4: 
  5: # proivdes RELP reception
  6: input(type="imrelp" name="imrepl" port="2514" ruleset="remote_in_relp" tls="off")
  7: 
  8: # provides secure RELP reception (with client not needing to provide a CA signed cert)
  9: # Limitation:
 10: # - even if tls.authMode is not set, RELP GnuTLS implimentation seems to default requesting a client certifcate
 11: # - might be fixed in future: https://github.com/rsyslog/rsyslog/issues/435
 12: input(
 13:   type="imrelp"
 14:   name="imrelp_secure"
 15:   port="7514"
 16:   ruleset="remote_in_relp_secure"
 17:   tls="on"
 18:   tls.dhbits="2048"
 19:   tls.caCert="/usr/local/etc/pki/test/test_ca.cert.pem"
 20:   tls.myCert="/usr/local/etc/pki/test/test_syslog_server.cert.pem"
 21:   tls.myPrivKey="/usr/local/etc/pki/test/test_syslog_server.key.pem"
 22:   #tls.authMode="anon"
 23: )
 24: 
 25: # provides secure RELP reception (with client needing to provide a CA signed cert)
 26: input(
 27:   type="imrelp"
 28:   name="imrelp_secure_client_auth"
 29:   port="8514"
 30:   ruleset="remote_in_relp_secure_client_auth"
 31:   tls="on"
 32:   tls.dhbits="2048"
 33:   tls.caCert="/usr/local/etc/pki/test/test_ca.cert.pem"
 34:   tls.myCert="/usr/local/etc/pki/test/test_syslog_server.cert.pem"
 35:   tls.myPrivKey="/usr/local/etc/pki/test/test_syslog_server.key.pem"
 36:   tls.authMode="name"
 37:   
 38:   tls.permittedPeer=["*"]
 39:   
 40: )
##> end of expand directive: $IncludeConfig /etc/rsyslog.d/input/*.conf
 14: $IncludeConfig /etc/rsyslog.d/output/*.conf
##< start of include directive: $IncludeConfig /etc/rsyslog.d/output/*.conf
##^ expanding file: /etc/rsyslog.d/output/71-out_file.conf
  1: ## Option to write remote logs to plain files
  2: # Note further, it would be prudent to setup logrotate for /var/log/remote/*
  3: # See 50-ruleset.conf for the parent ruleset that calls this
  4: # This will be blank if rsyslog_omfile_enabled="on" is not set
  5: 
  6: # Avoid using invalid hostnames if possible (meta-data enabled)
  7: template(name="TmplPerHostFile" type="string" string="/var/log/remote/%$.hostname%")
  8: 
  9: 
 10: # Dynamic stats for output
 11: dyn_stats(name="msg_per_fromhost_out_file_post_filter" resettable="on" maxCardinality="10000" unusedMetricLife="86400" )
 12: 
 13: ruleset(name="out_file") {
 14: 
 15:   $IncludeConfig /etc/rsyslog.d/output/filters/out_file/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/output/filters/out_file/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/output/filters/out_file/*.conf
 16: 
 17:   set $.inc_status = dyn_inc("msg_per_fromhost_out_file_post_filter", $fromhost);
 18:   # TODO - improve action when incriment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
 19:   if ($.inc_status != 0) then { 
 20:     action(name="dyn_stat_inc_error" type="omfile" file="/dev/null" template="Empty")
 21:   }
 22: 
 23:   # In the simple case, we use the hostname as the filename and place all logs in that file
 24:   action(
 25:        name="out_file_remote_in_file_hostname"
 26:        type="omfile"
 27:        template="TmplRSyslogJSON"
 28:        dynaFile="TmplPerHostFile"
 29:        dynaFileCacheSize="100"
 30:        asyncWriting="on"
 31:        flushOnTXEnd="off"
 32:        ioBufferSize="256k"
 33:        dirOwner="root"
 34:        dirGroup="wheel"
 35:        dirCreateMode="0755"
 36:        fileOwner="root"
 37:        fileGroup="wheel"
 38:        FileCreateMode="0640"
 39:   )
 40: 
 41:   
 42: }##^ expanding file: /etc/rsyslog.d/output/81-fwd_kafka.conf
  1: # Kafka output (if enabled, else blank)
  2: module(load="omkafka")
  3: 
  4: # Dynamic stats for output
  5: dyn_stats(name="msg_per_fromhost_fwd_kafka_post_filter" resettable="on" maxCardinality="10000" unusedMetricLife="86400" )
  6: 
  7: ruleset(name="fwd_kafka")
  8: {
  9:   $IncludeConfig /etc/rsyslog.d/output/filters/fwd_kafka/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/output/filters/fwd_kafka/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/output/filters/fwd_kafka/*.conf
 10: 
 11:   set $.inc_status = dyn_inc("msg_per_fromhost_fwd_kafka_post_filter", $fromhost);
 12:   # TODO - improve action when incriment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
 13:   if ($.inc_status != 0) then {
 14:     action(name="dyn_stat_inc_error" type="omfile" file="/dev/null" template="Empty")
 15:   }
 16: 
 17:   action(
 18:     name="fwd_kafka_topic_test_syslog"
 19:     type="omkafka"
 20:     broker=["test_kafka:9092"]
 21:     confParam=["batch.num.messages=1", "queue.buffering.max.ms=100", "sasl.mechanisms=PLAIN", "sasl.username=test", "sasl.password=test-secret", "security.protocol=sasl_ssl", "ssl.ca.location=/usr/local/etc/pki/test/test_ca.cert.pem", "ssl.key.location=/usr/local/etc/pki/test/test_syslog_server.key.pem", "ssl.certificate.location=/usr/local/etc/pki/test/test_syslog_server.cert.pem"]
 22:     topic="test_syslog"
 23:     dynatopic="off"
 24:     partitions.auto="on"
 25:     
 26:     resubmitOnFailure="on"
 27:     keepFailedMessages="on"
 28:     failedMsgFile="/var/lib/rsyslog/kafka_failed.msg"
 29:     template="TmplJSON"
 30:     action.resumeRetryCount = "-1"
 31:     # queue config
 32:     queue.type = "LinkedList"
 33:     queue.filename="fwd_kafka"
 34:     queue.maxDiskSpace = "1073741824"
 35:     queue.saveOnShutdown="on"
 36:     queue.size = "2097152"
 37:     queue.discardMark = "1048576"
 38:     queue.discardSeverity = "6"
 39:   )
 40: }
##^ expanding file: /etc/rsyslog.d/output/82-fwd_syslog.conf
  1: # Syslog output (if enabled, else blank)
  2: # omfwd module is loaded by deafault / built-in
  3: 
  4: # Dynamic stats for output
  5: dyn_stats(name="msg_per_fromhost_fwd_syslog_post_filter" resettable="on" maxCardinality="10000" unusedMetricLife="86400" )
  6: 
  7: ruleset(name="fwd_syslog")
  8: {
  9:   $IncludeConfig /etc/rsyslog.d/output/filters/fwd_syslog/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/output/filters/fwd_syslog/*.conf
##^ expanding file: /etc/rsyslog.d/output/filters/fwd_syslog/exclude_foobar.conf
  1: # tests black-list approach
  2: if $msg contains "foobar" then { stop }
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/output/filters/fwd_syslog/*.conf
 10: 
 11:   set $.inc_status = dyn_inc("msg_per_fromhost_fwd_syslog_post_filter", $fromhost);
 12:   # TODO - improve action when incriment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
 13:   if ($.inc_status != 0) then {
 14:     action(name="dyn_stat_inc_error" type="omfile" file="/dev/null" template="Empty")
 15:   }
 16: 
 17:   action(
 18:     name="fwd_syslog_target_test_syslog_relay"
 19:     type="omfwd"
 20:     Target="test_syslog_relay"
 21:     Port="10514"
 22:     Protocol="tcp"
 23:     template="TmplRFC5424Meta"
 24:     action.resumeRetryCount = "-1"
 25:     # queue config
 26:     queue.type="LinkedList"
 27:     queue.filename="fwd_syslog"
 28:     queue.maxDiskSpace="1073741824"
 29:     queue.saveOnShutdown="on"
 30:     queue.size="2097152"
 31:     queue.discardMark="1048576"
 32:     queue.discardSeverity="6"
 33:     # often last message is lost when a connection breaks
 34:     resendLastMSGOnReconnect="on"
 35:   )
 36: }
##^ expanding file: /etc/rsyslog.d/output/83-fwd_json.conf
  1: # JSON output (if enabled, else blank)
  2: # omfwd module is loaded by deafault / built-in
  3: 
  4: # Dynamic stats for output
  5: dyn_stats(name="msg_per_fromhost_fwd_json_post_filter" resettable="on" maxCardinality="10000" unusedMetricLife="86400" )
  6: 
  7: ruleset(name="fwd_json")
  8: {
  9:   $IncludeConfig /etc/rsyslog.d/output/filters/fwd_json/*.conf
##< start of include directive:   $IncludeConfig /etc/rsyslog.d/output/filters/fwd_json/*.conf
##> end of expand directive:   $IncludeConfig /etc/rsyslog.d/output/filters/fwd_json/*.conf
 10: 
 11:   set $.inc_status = dyn_inc("msg_per_fromhost_fwd_json_post_filter", $fromhost);
 12:   # TODO - improve action when incriment failed, e.g. cumbersome but would show up in impstats action counts at least to know there is an issue
 13:   if ($.inc_status != 0) then {
 14:     action(name="dyn_stat_inc_error" type="omfile" file="/dev/null" template="Empty")
 15:   }
 16: 
 17:   action(
 18:     name="fwd_json_target_test_json_relay"
 19:     type="omfwd"
 20:     Target="test_json_relay"
 21:     Port="15000"
 22:     Protocol="tcp"
 23:     template="TmplJSONRawMsg"
 24:     # queue config
 25:     action.resumeRetryCount = "-1"
 26:     queue.type = "LinkedList"
 27:     queue.filename="fwd_json"
 28:     queue.maxDiskSpace = "1073741824"
 29:     queue.saveOnShutdown="on"
 30:     queue.size = "2097152"
 31:     queue.discardMark = "1048576"
 32:     queue.discardSeverity = "6"
 33:     # often last message is lost when a connection breaks
 34:     resendLastMSGOnReconnect="on"
 35:   )
 36: }
##> end of expand directive: $IncludeConfig /etc/rsyslog.d/output/*.conf
 15: 
 16: # Optional extra custom config to inlcude from volume via /etc/rsyslog.d/extra
 17: $IncludeConfig /etc/rsyslog.d/extra/*.conf
##< start of include directive: $IncludeConfig /etc/rsyslog.d/extra/*.conf
##^ expanding file: /etc/rsyslog.d/extra/91_extra_test.conf
  1: # Example config for own custom input and outputs either independent or integrated with other pre-existing inputs or outputs.
  2: 
  3: module(load="imkafka")
  4: 
  5: # Independent input
  6: # - Doesn't integrate with other existing outputs in /etc/rsyslog.d/output
  7: # - Not affected by any other input filters
  8: input(
  9:   type="imkafka"
 10:   topic="extra_syslog"
 11:   broker=["test_kafka:9092"]
 12:   ConfParam=["batch.num.messages=1", "queue.buffering.max.ms=100", "client.id=rsyslog_extra", "sasl.mechanisms=PLAIN", "sasl.username=test", "sasl.password=test-secret", "security.protocol=sasl_ssl", "ssl.ca.location=/usr/local/etc/pki/test/test_ca.cert.pem", "ssl.key.location=/usr/local/etc/pki/test/test_syslog_server.key.pem", "ssl.certificate.location=/usr/local/etc/pki/test/test_syslog_server.cert.pem"]
 13:   consumergroup="rsyslog_extra"
 14:   ruleset="extra_kafka_input"
 15: )
 16: 
 17: # Independent output
 18: # - Doesn't integrate with other existing inputs in /etc/rsyslog.d/input, except the above input that calls it.
 19: # - Not affected by any other output filters
 20: # - But does depend on a template already defined in 60-output_format.conf
 21: ruleset(name="extra_kafka_input" parser="rsyslog.pmnull") {
 22:   action(
 23:     type="omfile"
 24:     template="RawMsg"
 25:     file="/var/log/remote/extra_kafka_input.log"
 26:   )
 27: }
 28: 
 29: # Integrated extra output
 30: # - rsyslog_call_fwd_extra_rule=true must be set
 31: # - Then /etc/rsyslog.d/60-output_format.conf should call this ruleset after the other pre-defined outputs
 32: # - Expects the ruleset with name `fwd_extra` to be defined in a file in /etc/rsyslog.d/extra/ and rsyslog will fail to start if it is missing
 33: # - Will be affected by global output filters in /etc/rsyslog.d/output/filters/*
 34: # - Input filters will also apply
 35: ruleset(name="fwd_extra") {
 36:   action(
 37:     type="omfile"
 38:     template="RawMsg"
 39:     file="/var/log/remote/all_raw.log"
 40:   )
 41: }
 42: 
 43: # Integrated extra input
 44: # - To plug input into pre-defined outputs of /etc/rsyslog.d/output/, must set ruleset="output"
 45: # - Then, global input filters from /etc/rsyslog.d/input/filters/* will apply
 46: # - And, global output filters from /etc/rsyslog.d/output/filters/* will apply
 47: module(load="imfile")
 48: input(
 49:   type="imfile"
 50:   File="/tmp/test_imfile"
 51:   PersistStateInterval="60"
 52:   freshStartTail="on"
 53:   Tag="test_imfile:"
 54:   Severity="info"
 55:   Facility="local7"
 56:   ruleset="output"
 57: )
##> end of expand directive: $IncludeConfig /etc/rsyslog.d/extra/*.conf
