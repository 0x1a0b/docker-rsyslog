# Output templates
# Built-in templates at https://www.rsyslog.com/doc/v8-stable/configuration/templates.html#reserved-template-names
# E.g.
# - RSYSLOG_TraditionalFileFormat
# - RSYSLOG_FileFormat
# - RSYSLOG_TraditionalForwardFormat
# - RSYSLOG_SyslogProtocol23Format

{{ $rsyslog_mmpstrucdata := getenv "rsyslog_mmpstrucdata" | toLower | eq "on" "true" -}}
{{ $rsyslog_mmjsonparse := getenv "rsyslog_mmjsonparse" | toLower | eq "on" "true" -}}
{{ $rsyslog_support_metadata_formats := getenv "rsyslog_support_metadata_formats" | toLower | eq "on" "true" -}}

# Simple raw message template (might be useful for passing on messages unprocessed)
template(name="RawMsg" type="string" string="%rawmsg%\n")

# Misc templates (e.g. for calling via exec_template)
# TODO: If need be

# Standard example of RFC5424
# Note, RSYSLOG_SyslogProtocol23Format is the built-in reserved template name for a draft of RFC5424, so the above is more or less identical to that
template(name="TmplRFC5424" type="string" string="<%pri%>1 %timestamp:::date-rfc3339% %hostname% %app-name% %procid% %msgid% %structured-data% %msg%\n")

{{if $rsyslog_support_metadata_formats -}}
# RFC5424 with syslog relay and own custom meta-data pre-pended to the structured data element
# Like RSYSLOG_SyslogProtocol23Format, but with a special extra structured data field to append structured data.
# Use of variable property types as per https://www.rsyslog.com/doc/master/rainerscript/variable_property_types.html
# Regex needed to deal with structured data being null '-' and needing to append/replace null.
# `%structured-data:R,ERE,0,BLANK:[[].*--end%` avoids appending a null charceter '-' if there wasn't any pre-existing structured data.
# See http://www.rsyslog.com/doc/v8-stable/configuration/nomatch.html
template(name="TmplRFC5424Meta" type="string" string="<%pri%>1 %timestamp:::date-rfc3339% %$.hostname% %app-name% %procid% %msgid% [syslog-relay@16543 timegenerated=\"%timegenerated:::date-rfc3339%\" fromhost=\"%fromhost%\" fromhost-ip=\"%fromhost-ip%\" myhostname=\"%$myhostname%\" inputname=\"%inputname%\" format=\"%$!syslog-relay!format%\" pri-valid=\"%$!syslog-relay!pri-valid%\" header-valid=\"%$!syslog-relay!header-valid%\" tls=\"%$!syslog-relay!tls%\" authenticated-client=\"%$!syslog-relay!authenticated-client%\"]%structured-data:R,ERE,0,BLANK:[[].*--end% %msg%\n")
{{- end}}

# JSON templates

# Make sure the message content is escaped to be safely interpreted as JSON
# NB! Rainerscript only supports setting quoted variables and jsonf outputs a quoted value forcing a string JSON type. To get integer or boolean JSON types requires manually building a JSON field, i.e. otherwise { "boolean": true } gets quoted as { "boolean": "true" }
# While bool and int JSON types are used, for RFC5424, `-` represents null and is left as when the field is flat (not a nested object). However, if the structured data element is `-` or can't be parsed into json, then it is set as null because some products like elasticsearch will have data mapping conflicts if it expects a json object (e.g. nested field) but instead gets a plain string (e.g. `-`).

# Output the full native rsyslog JSON message object
template(name="TmplRSyslogJSON" type="string" string="%jsonmesg%\n")

# Output a subset of the native rsyslog JSON message fields (no extra metsadata or validations)
# Note, the json $! tree output will output enclosing brakets { } which breaks JSON parsing, so strip these by removing first 2 charceters '{ ' and allowing the end closing braket to occur
template(name="TmplJSON" type="list") {
  constant(value="{ ")
  property(name="syslogfacility" format="jsonf")
  constant(value=", ")
  property(name="syslogfacility-text" format="jsonf")
  constant(value=", ")
  property(name="syslogseverity" format="jsonf")
  constant(value=", ")
  property(name="syslogseverity-text" format="jsonf")
  constant(value=", ")
  property(name="timestamp" dateFormat="rfc3339" format="jsonf")
  constant(value=", ")
  {{if $rsyslog_support_metadata_formats -}}
  property(name="$.hostname" outname="hostname" format="jsonf")
  {{- else}}
  property(name="hostname" format="jsonf")
  {{- end}}
  constant(value=", ")
  property(name="app-name" format="jsonf")
  constant(value=", ")
  property(name="procid" format="jsonf")
  constant(value=", ")
  property(name="msgid" format="jsonf")
  constant(value=", ")
  {{if not $rsyslog_mmpstrucdata -}}
  property(name="structured-data" format="jsonf")
  constant(value=", ")
  {{- end}}
  property(name="msg" format="jsonf")
  constant(value=", ")
  property(name="$!" dateFormat="rfc3339" position.from="2")
  constant(value="\n")
}

{{if $rsyslog_support_metadata_formats -}}
# JSON output with syslog relay and own custom meta-data pre-pended to the structured data element
# Assumes rsyslog_mmpstrucdata and rsyslog_mmjsonparse also in use, or else those values should template out as null
# RFC3164 assumed hostname parsing that might be incorrect are replaced with local var $.hostname = $fromhost instead of standard $hostname property when headers are detected as non-conformant
template(name="TmplJSONRawMeta" type="list") {
  constant(value="{ ")
  property(name="syslogfacility" format="jsonf")
  constant(value=", ")
  property(name="syslogfacility-text" format="jsonf")
  constant(value=", ")
  property(name="syslogseverity" format="jsonf")
  constant(value=", ")
  property(name="syslogseverity-text" format="jsonf")
  constant(value=", ")
  property(name="timestamp" dateFormat="rfc3339" format="jsonf")
  constant(value=", ")
  property(name="$.hostname" outname="hostname" format="jsonf")
  constant(value=", ")
  property(name="app-name" format="jsonf")
  constant(value=", ")
  property(name="procid" format="jsonf")
  constant(value=", ")
  property(name="msgid" format="jsonf")
  constant(value=", ")
  {{if not $rsyslog_mmpstrucdata -}}
  property(name="structured-data" format="jsonf")
  constant(value=", ")
  {{- end}}
  property(name="rawmsg" format="jsonf")
  constant(value=", ")
  property(name="$!" dateFormat="rfc3339" position.from="2")
  constant(value="\n")
}
{{- end}}
