# Rules and actions to apply when a specific kind of input is received

{{$rsyslog_support_metadata_formats := getenv "rsyslog_support_metadata_formats" | toLower | eq "true" -}}
{{$rsyslog_filtering_enabled := getenv "rsyslog_filtering_enabled" | toLower | eq "true" -}}
{{$rsyslog_omfile_enabled := getenv "rsyslog_omfile_enabled" | toLower | eq "true" -}}
{{$rsyslog_omkafka_enabled := getenv "rsyslog_omkafka_enabled" | toLower | eq "true" -}}
{{$rsyslog_omfwd_syslog_enabled := getenv "rsyslog_omfwd_syslog_enabled" | toLower | eq "true" -}}
{{$rsyslog_omfwd_json_enabled := getenv "rsyslog_omfwd_json_enabled" | toLower | eq "true" -}}
{{$rsyslog_forward_extra := getenv "rsyslog_forward_extra" | toLower | eq "true" -}}

# Customise the settings of the built-in RFC3164 to
# - Avoid populating syslog tags incorrectly when bad clients don't follow tagging conventions
# - Avoid adding in a pre-pending space in the message field
parser(name="custom.rfc3164" type="pmrfc3164" force.tagEndingByColon="on" remove.msgFirstSpace="on")

ruleset(name="remote_in_udp" parser=["rsyslog.rfc5424", "custom.rfc3164"]) {
  {{if $rsyslog_support_metadata_formats -}}
  set $!tls = "false";
  set $!authenticated_client = "false";
  {{- end}}
  {{if $rsyslog_filtering_enabled -}}
  call input_filter
  {{- end}}
  call output
}

ruleset(name="remote_in_tcp" parser=["rsyslog.rfc5424", "custom.rfc3164"]) {
  {{if $rsyslog_support_metadata_formats -}}
  set $!tls = "false";
  set $!authenticated_client = "false";
  {{- end}}
  {{if $rsyslog_filtering_enabled -}}
  call input_filter
  {{- end}}
  call output
}

ruleset(name="remote_in_tcp_secure" parser=["rsyslog.rfc5424", "custom.rfc3164"]) {
  {{if $rsyslog_support_metadata_formats -}}
  set $!tls = "true";
  set $!authenticated_client = "false";
  {{- end}}
  {{if $rsyslog_filtering_enabled -}}
  call input_filter
  {{- end}}
  call output
}

ruleset(name="remote_in_relp" parser=["rsyslog.rfc5424", "custom.rfc3164"]) {
  {{if $rsyslog_support_metadata_formats -}}
  set $!tls = "false";
  set $!authenticated_client = "false";
  {{- end}}
  {{if $rsyslog_filtering_enabled -}}
  call input_filter
  {{- end}}
  call output
}

# NB: rsyslog limitation seems to block RELP TLS without client authentication
ruleset(name="remote_in_relp_secure" parser=["rsyslog.rfc5424", "custom.rfc3164"]) {
  {{if $rsyslog_support_metadata_formats -}}
  set $!tls = "true";
  set $!authenticated_client = "false";
  {{- end}}
  {{if $rsyslog_filtering_enabled -}}
  call input_filter
  {{- end}}
  call output
}

ruleset(name="remote_in_relp_secure_client_auth" parser=["rsyslog.rfc5424", "custom.rfc3164"]) {
  {{if $rsyslog_support_metadata_formats -}}
  set $!tls = "true";
  set $!authenticated_client = "true";
  {{- end}}
  {{if $rsyslog_filtering_enabled -}}
  call input_filter
  {{- end}}
  call output
}

# Input filter rules are placed in filter/*.conf and should be conditions that drop (stop) messages from being processed futher

# Rules to output and forward / relay messages placed in output/*.conf and called below

ruleset(name="output") {

  {{if $rsyslog_support_metadata_formats -}}
  # append more meta-data
  if $protocol-version == "1" then {
    set $!format = "RFC5424";
  } else {
    # assume protocol-version == 0
    if $rawmsg-after-pri startswith $hostname then {
      # there is no syslog header starting with a timestamp
      set $!format = "RFC3164_malformed";
    } else {
      set $!format = "RFC3164";
    }
  }
  {{- end}}

  # Standard outputs "pre-bundled
  {{if $rsyslog_omfile_enabled -}}
  call out_file
  {{- end}}
  {{if $rsyslog_omkafka_enabled -}}
  call fwd_kafka
  {{- end}}
  {{if $rsyslog_omfwd_syslog_enabled -}}
  call fwd_syslog
  {{- end}}
  {{if $rsyslog_omfwd_json_enabled -}}
  call fwd_json
  {{- end}}
  {{if $rsyslog_forward_extra -}}
  # Optional extra output config inlcude
  # Add as volume via /etc/rsyslog.d/output/extra
  call output_extra
  {{- end}}

}
