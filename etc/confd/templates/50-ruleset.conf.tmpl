# Rules and actions to apply when a specific kind of input is received
# Note extensive use of variable property types as per https://www.rsyslog.com/doc/master/rainerscript/variable_property_types.html

{{ $rsyslog_mmpstrucdata := getenv "rsyslog_mmpstrucdata" | toLower | eq "on" "true" -}}
{{ $rsyslog_mmjsonparse := getenv "rsyslog_mmjsonparse" | toLower | eq "on" "true" -}}
{{ $rsyslog_mmjsonparse_without_cee := getenv "rsyslog_mmjsonparse_without_cee" | toLower | eq "on" "true" -}}
{{ $rsyslog_support_metadata_formats := getenv "rsyslog_support_metadata_formats" | toLower | eq "on" "true" -}}
{{ $rsyslog_input_filtering_enabled := getenv "rsyslog_input_filtering_enabled" | toLower | eq "on" "true" -}}
{{ $rsyslog_output_filtering_enabled := getenv "rsyslog_output_filtering_enabled" | toLower | eq "on" "true" -}}
{{ $rsyslog_omfile_enabled := getenv "rsyslog_omfile_enabled" | toLower | eq "on" "true" -}}
{{ $rsyslog_omkafka_enabled := getenv "rsyslog_omkafka_enabled" | toLower | eq "on" "true" -}}
{{ $rsyslog_omfwd_syslog_enabled := getenv "rsyslog_omfwd_syslog_enabled" | toLower | eq "on" "true" -}}
{{ $rsyslog_omfwd_json_enabled := getenv "rsyslog_omfwd_json_enabled" | toLower | eq "on" "true" -}}
{{ $rsyslog_call_fwd_extra_rule := getenv "rsyslog_call_fwd_extra_rule" | toLower | eq "on" "true" -}}

# Customise the settings of the built-in RFC3164 to use extra options to better handle malformed messages
# - Avoid populating syslog tags incorrectly when bad clients don't follow tagging conventions
# - Avoid adding in a pre-pending space in the message field
parser(
  name="custom.rfc3164" type="pmrfc3164"
  force.tagEndingByColon="{{ getenv "rsyslog_pmrfc3164_force_tagEndingByColon" }}"
  remove.msgFirstSpace="{{ getenv "rsyslog_pmrfc3164_remove_msgFirstSpace" }}"
)

# Input related rulesets

ruleset(name="remote_in_udp" parser={{ getenv "rsyslog_parser" }}) {
  {{if $rsyslog_support_metadata_formats -}}
  set $.syslog-relay!tls = "false";
  set $.syslog-relay!authenticated-client = "false";
  {{- end}}
  {{if $rsyslog_input_filtering_enabled -}}
  $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
  $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_udp/*.conf
  {{- end}}
  call output
}

ruleset(name="remote_in_tcp" parser={{ getenv "rsyslog_parser" }}) {
  {{if $rsyslog_support_metadata_formats -}}
  set $.syslog-relay!tls = "false";
  set $.syslog-relay!authenticated-client = "false";
  {{- end}}
  {{if $rsyslog_input_filtering_enabled -}}
  $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
  $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_tcp/*.conf
  {{- end}}
  call output
}

ruleset(name="remote_in_tcp_secure" parser={{ getenv "rsyslog_parser" }}) {
  {{if $rsyslog_support_metadata_formats -}}
  set $.syslog-relay!tls = "true";
  set $.syslog-relay!authenticated-client = "false";
  {{- end}}
  {{if $rsyslog_input_filtering_enabled -}}
  $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
  $IncludeConfig /etc/rsyslog.d/input/filters/remote_in_tcp_secure/*.conf
  {{- end}}
  call output
}

ruleset(name="remote_in_relp" parser={{ getenv "rsyslog_parser" }}) {
  {{if $rsyslog_support_metadata_formats -}}
  set $.syslog-relay!tls = "false";
  set $.syslog-relay!authenticated-client = "false";
  {{- end}}
  {{if $rsyslog_input_filtering_enabled -}}
  $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
  $IncludeConfig /etc/rsyslog.d/input/remote_in_relp/*.conf
  {{- end}}
  call output
}

# NB: rsyslog limitation seems to block RELP TLS without client authentication
ruleset(name="remote_in_relp_secure" parser={{ getenv "rsyslog_parser" }}) {
  {{if $rsyslog_support_metadata_formats -}}
  set $.syslog-relay!tls = "true";
  set $.syslog-relay!authenticated-client = "false";
  {{- end}}
  {{if $rsyslog_input_filtering_enabled -}}
  $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
  $IncludeConfig /etc/rsyslog.d/input/remote_in_relp_secure/*.conf
  {{- end}}
  call output
}

ruleset(name="remote_in_relp_secure_client_auth" parser={{ getenv "rsyslog_parser" }}) {
  {{if $rsyslog_support_metadata_formats -}}
  set $.syslog-relay!tls = "true";
  set $.syslog-relay!authenticated-client = "true";
  {{- end}}
  {{if $rsyslog_input_filtering_enabled -}}
  $IncludeConfig /etc/rsyslog.d/input/filters/*.conf
  $IncludeConfig /etc/rsyslog.d/input/remote_in_relp_secure_client_auth/*.conf
  {{- end}}
  call output
}

# Input filter rules are placed in filter/*.conf and should be conditions that drop (stop) messages from being processed futher

# Ouptut rulesets
# Rules to output and forward / relay messages placed in output/*.conf and called below

ruleset(name="output") {

  {{if $rsyslog_mmpstrucdata -}}
  # Parse RFC5424 structured elements into JSON
  #action(type="mmpstrucdata" name="output_mmpstrucdata" jsonRoot="!structured-data")
  #see https://github.com/rsyslog/rsyslog/issues/1262 as jsonRoot doesn't work as desired
  action(type="mmpstrucdata" name="output_mmpstrucdata")
  # Guard against $!rfc5424-sd not existing
  if ($structured-data == "-") then {
    #set $!structured-data = "null";
    set $!rfc5424-sd = "null";
  }
  {{- end}}

  {{if $rsyslog_mmjsonparse -}}
  # Support trying to decode msg part as JSON (hopefully fails fast when not JSON)
  # - nullify $!msg-json if there is a failure
  # - null is represented as the literal string "null" and requires care with templates to output as a true JSON null datatype
  # By default, require the @cee cookie
  action(type="mmjsonparse" name="mmjsonparse_cee")
  if $parsesuccess == "OK" then {
    {{if $rsyslog_support_metadata_formats -}}
    set $.syslog-relay!json-msg-parsed = "true";
    {{- end}}
  } else {
    {{if $rsyslog_mmjsonparse_without_cee -}}
    # Also try parsing message as JSON without the @cee cookie
    # - mmjsonparse will fail to decode messages that have both structured data elements and JSON without a @cee cookie
    action(type="mmjsonparse" name="mmjsonparse_without_cee" cookie="")
    if $parsesuccess == "OK" then {
      {{if $rsyslog_support_metadata_formats -}}
      set $.syslog-relay!json-msg-parsed = "true";
      {{- end}}
    } else {
      # remove duplicated $!msg field (will use $msg in templates instead)
      unset $!msg;
      {{if $rsyslog_support_metadata_formats -}}
      set $.syslog-relay!json-msg-parsed = "false";
      {{- end}}
    }
    {{- else}}
    # remove duplicated $!msg field (will use $msg in templates instead)
    unset $!msg;
    {{if $rsyslog_support_metadata_formats -}}
    set $.syslog-relay!json-msg-parsed = "false";
    {{- end}}
    {{- end}}
  }
  {{- end}}

  {{if $rsyslog_support_metadata_formats -}}
  # Copy and create properties in a nested metadata json subelement called
  # "syslog-relay"
  # Note:
  # - Copying properties is less efficient.
  # - But this could simplify manually constructing JSON output with complex templates...
  # - `$!` can be output without needing to know exectly which JSON fields are present or not allowinig more dynamic attributes for messages.
  # There are issues formatting nested JSON output and items commented out due to limitations
  # - Instead, explicit / manual templating for JSON is the current workarround
  # - See https://github.com/rsyslog/rsyslog/issues/2873
  # - See https://github.com/rsyslog/rsyslog/issues/2827
  #set $.syslog-relay!timegenerated = format_time($timegenerated, "date-rfc3339");
  #set $.syslog-relay!fromhost = $fromhost;
  #set $.syslog-relay!fromhost-ip = $fromhost-ip;
  #set $.syslog-relay!myhostname = $$myhostname;
  #set $.syslog-relay!inputname = $inputname;
  if ($protocol-version == "1") then {
    set $.syslog-relay!format = "RFC5424";
    # when rsyslog parses a message as version 1 / RFC5424, it implies parsing worked
    set $.syslog-relay!pri-valid = "true";
    set $.syslog-relay!header-valid = "true";
    set $.hostname = $hostname;
  } else {
    # assume protocol-version == 0
    # check priority
    # 0-191 are valid priority encodings, set to 192 > 191 to indicate invalid
    set $.pri-test = cnum(re_extract($rawmsg, "^<([0-9]{1,3})>", 0, 0, "192"));
    if ($.pri-test > 191) then {
      set $.syslog-relay!format = "RFC3164_malformed";
      set $.syslog-relay!pri-valid = "false";
      set $.hostname = $fromhost;
    } else {
      set $.syslog-relay!pri-valid = "true";
    }
    # Check syslog header (date and hostname)
    # - See https://github.com/rsyslog/rsyslog/issues/1789
    # - Regex is costly, so skim for 'Mmm' pattern of date (but dont match to actual months)
    # - Also use a trick to see if rsyslog assumed the first word was the hostname after failing to parse a syslog header date
    if (not re_match($rawmsg-after-pri, "^[A-Z][a-z]{2}") or $rawmsg-after-pri startswith $hostname) then {
      # rsyslog assumed first word of malformed message was the hostname, so no valid header
      set $.syslog-relay!format = "RFC3164_malformed";
      set $.syslog-relay!header-valid = "false";
      set $.hostname = $fromhost;
      # If we wanted to correct a misaligned $msg due to a bad header...
      #set $.msg = $rawmsg-after-pri;
    } else {
      set $.syslog-relay!format = "RFC3164";
      # above checks not 100% precise to avoid perfomance cost, so only reasonably confident a good header was found
      set $.syslog-relay!header-valid = "true";
      set $.hostname = $hostname;
      #set $.msg = $msg;
    }
    # TODO check for valid app-name and processs ID values?
  }
  {{- end}}

  {{if $rsyslog_output_filtering_enabled -}}
  # global output filter
  $IncludeConfig /etc/rsyslog.d/output/filters/*.conf
  {{- end}}

  # Standard outputs "pre-bundled
  {{if $rsyslog_omfile_enabled -}}
  call out_file
  {{- end}}
  {{if $rsyslog_omkafka_enabled -}}
  call fwd_kafka
  {{- end}}
  {{if $rsyslog_omfwd_syslog_enabled -}}
  call fwd_syslog
  {{- end}}
  {{if $rsyslog_omfwd_json_enabled -}}
  call fwd_json
  {{- end}}

  # Add extra output ruleset call for extra conf
  {{if $rsyslog_call_fwd_extra_rule -}}
  call fwd_extra
  {{- end}}

}
